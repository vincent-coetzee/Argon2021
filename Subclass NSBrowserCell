
- (void)drawInteriorWithFrame:(NSRect)cellFrame inView:(NSView *)controlView {
if (iconImage != nil) {
NSSize imageSize = [iconImage size];
NSRect imageFrame, highlightRect, textFrame;

// Divide the cell into 2 parts, the image part (on the left) and the text part.
NSDivideRect(cellFrame, &imageFrame, &textFrame, ICON_INSET_HORIZ + ICON_TEXT_SPACING + imageSize.width, NSMinXEdge);
imageFrame.origin.x += ICON_INSET_HORIZ;
imageFrame.size = imageSize;

// Adjust the image frame top account for the fact that we may or may not be in a flipped control view, since when compositing
// the online documentation states: "The image will have the orientation of the base coordinate system, regardless of the destination coordinates".
if ([controlView isFlipped]) imageFrame.origin.y += ceil((textFrame.size.height + imageFrame.size.height) / 2);
else imageFrame.origin.y += ceil((textFrame.size.height - imageFrame.size.height) / 2);

// Depending on the current state, set the color we will highlight with.
if ([self isHighlighted]) {
// use highlightColorInView instead of [NSColor selectedControlColor] since NSBrowserCell slightly dims all cells except those in the right most column.
// The return value from highlightColorInView will return the appropriate one for you.
[[self highlightColorInView: controlView] set];
} else {
[[NSColor controlBackgroundColor] set];
}

// Draw the highligh, bu only the portion that won't be caught by the call to [super drawInteriorWithFrame:...] below. No need to draw parts 2 times!
highlightRect = NSMakeRect(NSMinX(cellFrame), NSMinY(cellFrame), NSWidth(cellFrame) - NSWidth(textFrame), NSHeight(cellFrame));
NSRectFill(highlightRect);

// Blit the image.
[iconImage compositeToPoint:imageFrame.origin operation:NSCompositeSourceOver];

// Have NSBrowser kindly draw the text part, since it knows how to do that for us, no need to re-invent what it knows how to do.
[super drawInteriorWithFrame:textFrame inView:controlView];
} else {
// Atleast draw something if we couldn't find an icon. You may want to do something more intelligent.
[super drawInteriorWithFrame:cellFrame inView:controlView];
}
}
